// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using System.Collections.Generic;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.3.2102.1701 at 13:48 on Thursday, 30 September 2021.
	/// </remarks>
	public partial class Model0_Gibbs : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Message to marginal of 'bothHeads'</summary>
		public GibbsMarginal<Bernoulli,bool> bothHeads_marginal_F;
		/// <summary>True if Changed_numberOfIterations_secondCoin has executed. Set this to false to force re-execution of Changed_numberOfIterations_secondCoin</summary>
		public bool Changed_numberOfIterations_secondCoin_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_secondCoin has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_secondCoin</summary>
		public bool Changed_numberOfIterationsDecreased_Init_secondCoin_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_secondCoin has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_secondCoin</summary>
		public bool Changed_numberOfIterationsDecreased_Init_secondCoin_isInitialised;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message to marginal of 'firstCoin'</summary>
		public GibbsMarginal<Bernoulli,bool> firstCoin_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the secondCoin property</summary>
		private bool SecondCoin;
		/// <summary>Message to marginal of 'secondCoin'</summary>
		public GibbsMarginal<Bernoulli,bool> secondCoin_marginal_F;
		/// <summary>The constant 'vBernoulli0'</summary>
		public Bernoulli vBernoulli0;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'secondCoin'</summary>
		public bool secondCoin
		{
			get {
				return this.SecondCoin;
			}
			set {
				if (this.SecondCoin!=value) {
					this.SecondCoin = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_secondCoin_isInitialised = false;
					this.Changed_numberOfIterations_secondCoin_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'bothHeads' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli BothHeadsMarginal()
		{
			return this.bothHeads_marginal_F.Distribution;
		}

		/// <summary>
		/// Returns the Samples for 'bothHeads' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<bool> BothHeadsSamples()
		{
			return new List<bool>(this.bothHeads_marginal_F.Samples);
		}

		/// <summary>Computations that depend on the observed value of numberOfIterations and secondCoin</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_secondCoin(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_secondCoin_isDone) {
				return ;
			}
			bool[] firstCoin_uses_F;
			Bernoulli[] firstCoin_uses_B;
			// Create array for 'firstCoin_uses' Forwards messages.
			firstCoin_uses_F = new bool[1];
			// Create array for 'firstCoin_uses' Backwards messages.
			firstCoin_uses_B = new Bernoulli[1];
			firstCoin_uses_B[0] = Bernoulli.Uniform();
			bool bothHeads_F = default(bool);
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'firstCoin_marginal' from UsesEqualDef factor
				this.firstCoin_marginal_F = UsesEqualDefGibbsOp<bool>.MarginalGibbs<Bernoulli>(firstCoin_uses_B, this.vBernoulli0, this.firstCoin_marginal_F);
				// Message to 'firstCoin_uses' from UsesEqualDef factor
				firstCoin_uses_F[0] = UsesEqualDefGibbsOp<bool>.UsesGibbs<Bernoulli>(this.firstCoin_marginal_F, 0, firstCoin_uses_F[0]);
				// Message to 'bothHeads' from And factor
				bothHeads_F = Factor.And(firstCoin_uses_F[0], this.SecondCoin);
				// Message to 'bothHeads_marginal' from ReplicateWithMarginal factor
				this.bothHeads_marginal_F = ReplicateGibbsOp<bool>.MarginalGibbs<Bernoulli,bool>(bothHeads_F, this.bothHeads_marginal_F);
				// Message to 'secondCoin_marginal' from ReplicateWithMarginal factor
				this.secondCoin_marginal_F = ReplicateGibbsOp<bool>.MarginalGibbs<Bernoulli,bool>(this.SecondCoin, this.secondCoin_marginal_F);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			this.Changed_numberOfIterations_secondCoin_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to secondCoin</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_secondCoin(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_secondCoin_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_secondCoin_isInitialised)) {
				return ;
			}
			this.firstCoin_marginal_F = new GibbsMarginal<Bernoulli,bool>(this.vBernoulli0, 100, 5, true, true, false);
			this.bothHeads_marginal_F = new GibbsMarginal<Bernoulli,bool>(new Bernoulli(), 100, 5, true, true, false);
			this.secondCoin_marginal_F = new GibbsMarginal<Bernoulli,bool>(this.vBernoulli0, 0, 5, true, true, false);
			this.Changed_numberOfIterationsDecreased_Init_secondCoin_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_secondCoin_isInitialised = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			this.vBernoulli0 = Bernoulli.Uniform();
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_secondCoin_isDone = false;
				}
				this.Changed_numberOfIterations_secondCoin_isDone = false;
			}
			this.Constant();
			this.Changed_numberOfIterationsDecreased_Init_secondCoin(initialise);
			this.Changed_numberOfIterations_secondCoin(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>
		/// Returns the marginal distribution for 'firstCoin' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli FirstCoinMarginal()
		{
			return this.firstCoin_marginal_F.Distribution;
		}

		/// <summary>
		/// Returns the Samples for 'firstCoin' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<bool> FirstCoinSamples()
		{
			return new List<bool>(this.firstCoin_marginal_F.Samples);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="secondCoin") {
				return this.secondCoin;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="bothHeads") {
				return this.BothHeadsMarginal();
			}
			if (variableName=="secondCoin") {
				return this.SecondCoinMarginal();
			}
			if (variableName=="firstCoin") {
				return this.FirstCoinMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			if ((variableName=="bothHeads")&&(query=="Samples")) {
				return this.BothHeadsSamples();
			}
			if ((variableName=="secondCoin")&&(query=="Samples")) {
				return this.SecondCoinSamples();
			}
			if ((variableName=="firstCoin")&&(query=="Samples")) {
				return this.FirstCoinSamples();
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>
		/// Returns the marginal distribution for 'secondCoin' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli SecondCoinMarginal()
		{
			return this.secondCoin_marginal_F.Distribution;
		}

		/// <summary>
		/// Returns the Samples for 'secondCoin' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The Samples</returns>
		public IList<bool> SecondCoinSamples()
		{
			return new List<bool>(this.secondCoin_marginal_F.Samples);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="secondCoin") {
				this.secondCoin = (bool)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
